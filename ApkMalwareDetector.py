#!/usr/bin/python
# -*- coding: utf-8 -*-

from Preprocess import Preprocess
from Config import *
from sys import argv

def _header(version): 
		print """ 
    ***********************
    _   ___ _  ____  __ ___  
   /_\ | _ \ |/ /  \/  |   \ 
  / _ \|  _/ ' <| |\/| | |) |
 /_/ \_\_| |_|\_\_|  |_|___/ \n
 ******* """,version," *******\n"

def _usage():
	print "\n\nUsage ApkMalwareDetector.py [--help|-h]\n"
	print "You can configure this system modifying Config.py you can edit: \n"
	print "PATH_RAW_TRAIN_MALWARE_SAMPLES -> Path where train samples are (class=Malware=1) (by default ./Samples/RAW/Train/Malware/)\n"
	print "PATH_RAW_TRAIN_NO_MALWARE_SAMPLES -> Path where train samples are (class=NoMalware=0) (by default ./Samples/RAW/Train/NoMalware/)\n)"
	print "PATH_RAW_TEST_SAMPLES -> Path where test samples are (by default ./Samples/RAW/Test/)\n"
	print "MANIFEST -> Manifest name (by default AndroidManifest.xml)\n"
	print "BACKSMALI -> Backsmali name (by default classes.dex)\n"
	print "CLASSIFIER -> Classifier type (0:Kmeans,1:KernelPerceptron,2:K_nearest_neighbour) (by default 2)\n"
	print "VERBOSE    -> Show all logs (by default True)\n"
		
class AntiMalware:
	
	def __init__(self,version):
		self.version,self.classifier    			   = version,CLASSIFIERS[CLASSIFIER]
		_header(self.version)
		(self.raw_test_samples,self.raw_train_samples,self.raw_test_names,) = Preprocess._parseAllRawApks()
	
	def _classify(self):
		train_samples = []
		if CLASSIFIER==0: 
			for train_sample in self.raw_train_samples: 
				train_samples.append(train_sample[0])
		else: train_samples = self.raw_train_samples
		if VERBOSE: print "***** Training... *****"
		res,classifieds = {},self.classifier.classify(train_samples,self.raw_test_samples)
		if VERBOSE: print "[OK]\n\n"
		for i in xrange(len(self.raw_test_names)): res[self.raw_test_names[i]] = classifieds[i]
		if VERBOSE: self._showClassified(res)
		return res
	
	def _showClassified(self,classified): 
		print "***** RESULTS *****"
		for i in classified: 
			if classified[i]==0: print "System has not detected as malware",i
			else: print "System has detected as malware",i,"be careful with it"
	
if __name__ == "__main__":
	version = "beta 0.1"
	if len(argv)>1 and (argv[1] == "--help" or argv[1] == "-h"): _header(version); _usage()
	else:	
		am  = AntiMalware(version)
		res = am._classify()
