#!/usr/bin/python
# -*- coding: utf-8 -*-

from Config import *
from xml.dom import minidom
from AxmlParserPY import axmlprinter
from os import getcwd
from Features import *
from re import match
from dexterity.dx.dex import Dex
from dexterity.dx.bytestream import ByteStream
from dexterity.dx.dxlib import dxlib
from dexterity.dx.printer import DexPrinter
from ctypes import cast,c_char_p

class FeatureExtract:
	
	@staticmethod
	def _getXML(): return minidom.parseString(axmlprinter.AXMLPrinter(open(MANIFEST, 'rb').read()).getBuff())
	
	@staticmethod
	def _parseXML(xmlDom):
		xmlIntents,xmlPermissions,i = {},{},0
		for intent in xmlDom.getElementsByTagName('action'):
			intent = intent.toxml()
			intent = intent[intent.rfind(".")+1:intent.rfind("\"")]
			xmlIntents[str(intent)] = i
			i += 1
		i = 0
		for permission in xmlDom.getElementsByTagName("uses-permission"):
			permission = permission.toxml()
			permission = permission[permission.rfind(".")+1:permission.rfind("\"")]
			xmlPermissions[str(permission)] = i
			i += 1
		return xmlPermissions,xmlIntents
		
	@staticmethod
	def _featureExtractXML():
		xmlDom         = FeatureExtract._getXML()
		xmlFeatures    = []       
		## Parse xml ##
		(xmlPermissions,xmlIntents) = FeatureExtract._parseXML(xmlDom)
		for permission in PERMISSIONS: xmlFeatures.append(1 if permission in xmlPermissions else 0)
		for intent     in INTENTS:     xmlFeatures.append(1 if intent in xmlIntents else 0)
		return xmlFeatures
		
	@staticmethod
	def _parseSD():
		bs = ByteStream(BACKSMALI)
		dex = dxlib.dx_parse(bs._bs).contents
		printer = DexPrinter()
		sdCApis,j = {},0
		for i in xrange(dex.header.contents.string_ids_size): sdCApis[str(cast(dex.string_data_list[i].contents.data,c_char_p).value[:int(dex.string_data_list[i].contents.size)])] = j
		return sdCApis
	
	@staticmethod
	def _featureExtractSD():
		sdCApis  = FeatureExtract._parseSD()
		features = []
		for command in COMMANDS: features.append(1 if command in sdCApis else 0)
		for api in APIS:
			if len(api)==1: features.append(1 if api in sdCApis else 0)
			else:
				inOne = 1 if api[0] in sdCApis else 0
				inTwo = 1 if api[1] in sdCApis else 0
				features.append(inOne&inTwo)
		return features
			
	@staticmethod
	def _featureExtract():
		return FeatureExtract._featureExtractXML()+FeatureExtract._featureExtractSD()
